const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

// Configuration
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3001';

if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// Create bot instance
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

console.log('ü§ñ BirdWatch Telegram Bot –∑–∞–ø—É—â–µ–Ω...');

// Store pending link requests
const pendingLinks = new Map();

// Helper function to make API requests
const apiRequest = async (endpoint, method = 'GET', data = null) => {
  try {
    const config = {
      method,
      url: `${API_BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error('API Error:', error.response?.data || error.message);
    throw error;
  }
};

// Start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `
ü¶Ö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BirdWatch Bot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/help - –°–ø—Ä–∞–≤–∫–∞
  `;

  bot.sendMessage(chatId, welcomeMessage);
});

// Help command
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BirdWatch
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: ${msg.from.id}
5. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /link <–∫–æ–¥>
  `;

  bot.sendMessage(chatId, helpMessage);
});

// Link command
bot.onText(/\/link (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const code = match[1].trim().toUpperCase();
  const telegramId = msg.from.id.toString();

  console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: –∫–æ–¥=${code}, telegramId=${telegramId}`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π endpoint
    const verifyResponse = await apiRequest('/telegram/public/verify-code', 'POST', {
      code: code,
      telegramId: telegramId
    });

    console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', verifyResponse);

    if (verifyResponse.valid && verifyResponse.success) {
      bot.sendMessage(chatId, `
‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ –û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é
‚Ä¢ –û –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
‚Ä¢ –û–± –æ—Ç–º–µ–Ω–µ —ç–∫—Å–∫—É—Ä—Å–∏–π
‚Ä¢ –û –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BirdWatch! ü¶Ö
      `);
    } else {
      bot.sendMessage(chatId, `‚ùå ${verifyResponse.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞'}`);
    }
  } catch (error) {
    console.error('Link error:', error);
    console.error('Error details:', error.response?.data || error.message);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});

// Status command
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();

  try {
    const statusResponse = await apiRequest('/telegram/status', 'GET');
    
    if (statusResponse.isLinked) {
      bot.sendMessage(chatId, `
‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω!

Telegram ID: ${statusResponse.telegramId}
–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–≤—è–∑–∞–Ω

–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö.
      `);
    } else {
      bot.sendMessage(chatId, `
‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω

–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:
1. –í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BirdWatch
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: ${telegramId}
5. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /link <–∫–æ–¥>
      `);
    }
  } catch (error) {
    console.error('Status error:', error);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle any other text messages
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // Ignore commands
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }

  bot.sendMessage(chatId, `
ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
  `);
});

// Error handling
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

bot.on('error', (error) => {
  console.error('Bot error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});

console.log('‚úÖ Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
