import { Injectable, NotFoundException, BadRequestException, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User, UserRole } from '../users/user.entity';
import { randomBytes } from 'crypto';
import axios from 'axios';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private linkCodes = new Map<string, { userId: string; telegramId: string; expiresAt: Date }>();
  private readonly botToken: string;
  private readonly telegramApiUrl: string;

  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
    private configService: ConfigService,
  ) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.telegramApiUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    if (!this.botToken) {
      this.logger.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  generateLinkCode(userId: string, telegramId: string): string {
    const code = randomBytes(6).toString('hex').toUpperCase();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

    this.linkCodes.set(code, { userId, telegramId, expiresAt });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
    this.cleanupExpiredCodes();

    return code;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–æ–º)
   */
  getLinkCode(code: string): { userId: string; telegramId: string; expiresAt: Date } | undefined {
    return this.linkCodes.get(code);
  }

  /**
   * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫–æ–¥—É
   */
  async linkTelegramAccount(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    const linkData = this.linkCodes.get(code);

    if (!linkData) {
      throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏');
    }

    if (linkData.expiresAt < new Date()) {
      this.linkCodes.delete(code);
      throw new BadRequestException('–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å—Ç–µ–∫');
    }

    if (linkData.userId !== userId) {
      throw new BadRequestException('–ö–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID
    const existingUser = await this.userRepository.findOne({
      where: { telegramId: linkData.telegramId }
    });

    if (existingUser && existingUser.id !== userId) {
      throw new BadRequestException('–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.userRepository.update(userId, {
      telegramId: linkData.telegramId
    });

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    this.linkCodes.delete(code);

    return {
      success: true,
      message: 'Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω'
    };
  }

  /**
   * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async unlinkTelegramAccount(userId: string): Promise<{ success: boolean; message: string }> {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user.telegramId) {
      throw new BadRequestException('Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω');
    }

    await this.userRepository.update(userId, { telegramId: null });

    return {
      success: true,
      message: 'Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram
   */
  async getTelegramLinkStatus(userId: string): Promise<{ isLinked: boolean; telegramId?: string }> {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return {
      isLinked: !!user.telegramId,
      telegramId: user.telegramId
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã
   */
  private cleanupExpiredCodes(): void {
    const now = new Date();
    for (const [code, data] of this.linkCodes.entries()) {
      if (data.expiresAt < now) {
        this.linkCodes.delete(code);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ Bot API
   */
  async sendTelegramNotification(telegramId: string, message: string): Promise<boolean> {
    if (!this.botToken) {
      this.logger.warn('Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      return false;
    }

    try {
      const response = await axios.post(`${this.telegramApiUrl}/sendMessage`, {
        chat_id: telegramId,
        text: message,
        parse_mode: 'HTML',
      });

      if (response.data.ok) {
        this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (ID: ${telegramId})`);
        return true;
      } else {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${response.data.description}`);
        return false;
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ userId
   */
  async sendNotificationToUser(userId: string, message: string): Promise<boolean> {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user || !user.telegramId) {
      this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞`);
      return false;
    }

    return await this.sendTelegramNotification(user.telegramId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É
   */
  async notifyParticipantBooked(userId: string, excursionTitle: string, status: 'CONFIRMED' | 'RESERVE', peopleCount: number): Promise<void> {
    const statusText = status === 'CONFIRMED' 
      ? '‚úÖ <b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>' 
      : 'üïê <b>–í—ã –≤ —Ä–µ–∑–µ—Ä–≤–µ</b>';
    
    const message = `
${statusText}

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${peopleCount}

${status === 'RESERVE' ? '–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç.' : '–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –≤–∞—Å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏!'}
    `.trim();

    await this.sendNotificationToUser(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
   */
  async notifyParticipantPromoted(userId: string, excursionTitle: string): Promise<void> {
    const message = `
üéâ <b>–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!</b>

–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É!

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>

–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏!
    `.trim();

    await this.sendNotificationToUser(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
   */
  async notifyParticipantCancelled(userId: string, excursionTitle: string, cancelledBy: string): Promise<void> {
    const message = `
‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
${cancelledBy !== userId ? '\n‚ö†Ô∏è –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥–æ–º' : ''}

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    `.trim();

    await this.sendNotificationToUser(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
   */
  async notifyGuideNewBooking(guideId: string, excursionTitle: string, participantName: string, peopleCount: number, status: string): Promise<void> {
    const statusEmoji = status === 'CONFIRMED' ? '‚úÖ' : 'üïê';
    const message = `
üìù <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é</b>

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
üë§ –£—á–∞—Å—Ç–Ω–∏–∫: ${participantName}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${peopleCount}
${statusEmoji} –°—Ç–∞—Ç—É—Å: ${status === 'CONFIRMED' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–†–µ–∑–µ—Ä–≤'}
    `.trim();

    await this.sendNotificationToUser(guideId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥—É –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
   */
  async notifyGuideCancellation(guideId: string, excursionTitle: string, participantName: string): Promise<void> {
    const message = `
‚ùå <b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</b>

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
üë§ –£—á–∞—Å—Ç–Ω–∏–∫: ${participantName}

–ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.
    `.trim();

    await this.sendNotificationToUser(guideId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
   */
  async notifyAdmins(message: string): Promise<void> {
    const admins = await this.userRepository.find({ 
      where: { role: UserRole.ADMIN } 
    });

    for (const admin of admins) {
      if (admin.telegramId) {
        await this.sendTelegramNotification(admin.telegramId, message);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
   */
  async notifyAdminsNewBooking(excursionTitle: string, participantName: string, peopleCount: number): Promise<void> {
    const message = `
üìä <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
üë§ –£—á–∞—Å—Ç–Ω–∏–∫: ${participantName}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${peopleCount}
    `.trim();

    await this.notifyAdmins(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
   */
  async notifyAdminsCancellation(excursionTitle: string, participantName: string): Promise<void> {
    const message = `
üìä <b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</b>

ü¶Ö –≠–∫—Å–∫—É—Ä—Å–∏—è: <b>${excursionTitle}</b>
üë§ –£—á–∞—Å—Ç–Ω–∏–∫: ${participantName}
    `.trim();

    await this.notifyAdmins(message);
  }
}
