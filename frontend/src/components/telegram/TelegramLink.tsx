import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useTelegram } from '@/hooks/useTelegram';

interface TelegramLinkProps {
  onStatusChange?: (isLinked: boolean) => void;
}

const TelegramLink: React.FC<TelegramLinkProps> = ({ onStatusChange }) => {
  const { isLoading, error, getStatus, generateCode, linkAccount, unlinkAccount } = useTelegram();
  const [status, setStatus] = useState<{ isLinked: boolean; telegramId?: string } | null>(null);
  const [telegramId, setTelegramId] = useState('');
  const [linkCode, setLinkCode] = useState('');
  const [generatedCode, setGeneratedCode] = useState<string | null>(null);
  const [step, setStep] = useState<'idle' | 'generate' | 'link'>('idle');

  useEffect(() => {
    loadStatus();
  }, []);

  const loadStatus = async () => {
    try {
      const statusData = await getStatus();
      setStatus(statusData);
      onStatusChange?.(statusData.isLinked);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
    }
  };

  const handleGenerateCode = async () => {
    if (!telegramId.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ Telegram ID');
      return;
    }

    try {
      const code = await generateCode(telegramId);
      setGeneratedCode(code);
      setStep('link');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', err);
    }
  };

  const handleLinkAccount = async () => {
    if (!linkCode.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏');
      return;
    }

    try {
      await linkAccount(linkCode);
      setStep('idle');
      setTelegramId('');
      setLinkCode('');
      setGeneratedCode(null);
      await loadStatus();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏:', err);
    }
  };

  const handleUnlink = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç?')) {
      return;
    }

    try {
      await unlinkAccount();
      await loadStatus();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏:', err);
    }
  };

  if (status?.isLinked) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üì± Telegram
            <span className="text-green-600 text-sm">‚úì –ü—Ä–∏–≤—è–∑–∞–Ω</span>
          </CardTitle>
          <CardDescription>
            –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <Label>Telegram ID:</Label>
              <p className="text-sm text-gray-600 font-mono">{status.telegramId}</p>
            </div>
            <Button 
              variant="outline" 
              onClick={handleUnlink}
              disabled={isLoading}
            >
              {isLoading ? '–û—Ç–≤—è–∑–∫–∞...' : '–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          üì± Telegram
          <span className="text-gray-500 text-sm">–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω</span>
        </CardTitle>
        <CardDescription>
          –ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —ç–∫—Å–∫—É—Ä—Å–∏—è—Ö
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {error && (
            <div className="text-red-600 text-sm bg-red-50 p-3 rounded">
              {error}
            </div>
          )}

          {step === 'idle' && (
            <>
              <div>
                <Label htmlFor="telegramId">–í–∞—à Telegram ID</Label>
                <Input
                  id="telegramId"
                  type="text"
                  placeholder="@username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID"
                  value={telegramId}
                  onChange={(e) => setTelegramId(e.target.value)}
                />
                <p className="text-xs text-gray-500 mt-1">
                  –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –º–æ–∂–Ω–æ —É –±–æ—Ç–∞ @userinfobot
                </p>
              </div>
              <Button 
                onClick={() => setStep('generate')}
                disabled={!telegramId.trim() || isLoading}
              >
                {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É'}
              </Button>
            </>
          )}

          {step === 'generate' && (
            <>
              <div>
                <Label>Telegram ID: {telegramId}</Label>
                <p className="text-sm text-gray-600 mb-4">
                  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
                </p>
              </div>
              <Button 
                onClick={handleGenerateCode}
                disabled={isLoading}
              >
                {isLoading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥'}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setStep('idle')}
                className="ml-2"
              >
                –ù–∞–∑–∞–¥
              </Button>
            </>
          )}

          {step === 'link' && generatedCode && (
            <>
              <div className="bg-blue-50 p-4 rounded-lg">
                <Label>–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:</Label>
                <div className="text-2xl font-mono font-bold text-blue-600 my-2">
                  {generatedCode}
                </div>
                <p className="text-sm text-gray-600">
                  –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ Telegram –±–æ—Ç–µ @birdwatch_bot –∫–æ–º–∞–Ω–¥–æ–π /link
                </p>
              </div>
              
              <div>
                <Label htmlFor="linkCode">–ö–æ–¥ –∏–∑ –±–æ—Ç–∞</Label>
                <Input
                  id="linkCode"
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –±–æ—Ç–∞"
                  value={linkCode}
                  onChange={(e) => setLinkCode(e.target.value.toUpperCase())}
                />
              </div>
              
              <div className="flex gap-2">
                <Button 
                  onClick={handleLinkAccount}
                  disabled={!linkCode.trim() || isLoading}
                >
                  {isLoading ? '–ü—Ä–∏–≤—è–∑–∫–∞...' : '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setStep('generate')}
                >
                  –ù–æ–≤—ã–π –∫–æ–¥
                </Button>
              </div>
            </>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default TelegramLink;
