import React from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '@/hooks/useAuth';
import { useExcursions } from '@/hooks/useExcursions';
import Layout from '@/components/layout/Layout';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

const ExcursionsPage: React.FC = () => {
  const { user, isLoading: authLoading } = useAuth();
  const { excursions, isLoading, error } = useExcursions();
  const router = useRouter();

  if (authLoading || isLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </Layout>
    );
  }

  if (!user) {
    return (
      <Layout>
        <div className="text-center py-16">
          <h1 className="text-2xl font-semibold mb-4">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h1>
          <p className="text-gray-600">–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        </div>
      </Layout>
    );
  }

  const formatDate = (dateString: string) => {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    }).format(new Date(dateString));
  };

  const getDifficultyLabel = (difficulty: number) => {
    switch (difficulty) {
      case 1: return '–õ–µ–≥–∫–æ';
      case 2: return '–°—Ä–µ–¥–Ω–µ';
      case 3: return '–°–ª–æ–∂–Ω–æ';
      case 4: return '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ';
      case 5: return '–≠–∫—Å—Ç—Ä–∏–º';
      default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }
  };

  const getDifficultyColor = (difficulty: number) => {
    switch (difficulty) {
      case 1: return 'bg-green-100 text-green-800';
      case 2: return 'bg-yellow-100 text-yellow-800';
      case 3: return 'bg-orange-100 text-orange-800';
      case 4: return 'bg-red-100 text-red-800';
      case 5: return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <Layout title="–≠–∫—Å–∫—É—Ä—Å–∏–∏ - BirdWatch">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-semibold text-gray-900">
              –û—Ä–Ω–∏—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏
            </h1>
            <p className="text-gray-600 mt-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—é –∑–∞ –ø—Ç–∏—Ü–∞–º–∏
            </p>
          </div>
          
          {user?.role === 'admin' && (
            <Button onClick={() => router.push('/admin/excursions/create')}>
              –°–æ–∑–¥–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é
            </Button>
          )}
        </div>

        {error && (
          <div className="mb-6 p-4 text-red-700 bg-red-50 border border-red-200 rounded-lg">
            {error}
          </div>
        )}

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {excursions.map((excursion) => (
            <Card key={excursion.id} className="hover:shadow-md transition-shadow">
              <CardHeader>
                <CardTitle className="text-lg">{excursion.title}</CardTitle>
                <CardDescription>
                  {formatDate(excursion.date)}, {excursion.time}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 mb-2 line-clamp-2">
                  {excursion.description}
                </p>
                <p className="text-sm text-gray-600 mb-1">
                  üìç {excursion.location}
                </p>
                <p className="text-sm text-gray-600 mb-1">
                  üë®‚Äçüè´ {excursion.guide.firstName} {excursion.guide.lastName}
                </p>
                <p className="text-sm text-gray-600 mb-3">
                  üë• –ú–µ—Å—Ç: {excursion.capacity} / –†–µ–∑–µ—Ä–≤: {excursion.reserve}
                </p>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    {excursion.price && (
                      <span className="text-sm font-medium text-primary">
                        {excursion.price} ‚ÇΩ
                      </span>
                    )}
                    {excursion.difficulty && (
                      <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(excursion.difficulty)}`}>
                        {getDifficultyLabel(excursion.difficulty)}
                      </span>
                    )}
                  </div>
                  
                  <Button 
                    size="sm"
                    onClick={() => router.push(`/excursions/${excursion.id}`)}
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {excursions.length === 0 && !error && (
          <div className="text-center py-12">
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600">
              {user?.role === 'admin' 
                ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é"'
                : '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!'
              }
            </p>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default ExcursionsPage;
