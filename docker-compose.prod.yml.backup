services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: birdwatching
      POSTGRES_USER: birduser
      POSTGRES_PASSWORD: birdpass123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U birduser -d birdwatching"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://birduser:birdpass123@postgres:5432/birdwatching
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: birdwatching
      DATABASE_USERNAME: birduser
      DATABASE_PASSWORD: birdpass123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-2024
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_EXPIRES_IN: 30d
      PORT: 3010
    ports:
      - "${BACKEND_PORT:-3010}:3010"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - backend_logs:/app/logs

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://5.144.181.38:${BACKEND_PORT:-3010}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://5.144.181.38:${BACKEND_PORT:-3010}
    ports:
      - "${FRONTEND_PORT:-8080}:3011"
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
  backend_logs:
