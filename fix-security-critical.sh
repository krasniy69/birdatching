#!/bin/bash

# üîí –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

set -e

echo "üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ù–´–• –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
generate_secret() {
    openssl rand -hex 32
}

generate_password() {
    openssl rand -base64 24 | tr -d "=+/" | cut -c1-16
}

echo ""
echo "üîë 1. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–û–í–´–• –°–ï–ö–†–ï–¢–û–í..."
echo "================================"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
NEW_JWT_SECRET=$(generate_secret)
NEW_DB_PASSWORD=$(generate_password)
NEW_REDIS_PASSWORD=$(generate_password)

echo "‚úÖ –ù–æ–≤—ã–π JWT_SECRET: ${NEW_JWT_SECRET:0:20}..."
echo "‚úÖ –ù–æ–≤—ã–π DB_PASSWORD: ${NEW_DB_PASSWORD:0:10}..."
echo "‚úÖ –ù–æ–≤—ã–π REDIS_PASSWORD: ${NEW_REDIS_PASSWORD:0:10}..."

echo ""
echo "üìù 2. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í..."
echo "==========================================="

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose.prod.yml
echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.prod.yml..."
sed -i.backup "s/JWT_SECRET: your-super-secret-jwt-key-change-in-production-2024/JWT_SECRET: $NEW_JWT_SECRET/" docker-compose.prod.yml
sed -i "s/POSTGRES_PASSWORD: birdpass123/POSTGRES_PASSWORD: $NEW_DB_PASSWORD/" docker-compose.prod.yml
sed -i "s/DATABASE_PASSWORD: birdpass123/DATABASE_PASSWORD: $NEW_DB_PASSWORD/" docker-compose.prod.yml

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è Redis
sed -i '/redis:/,/volumes:/ s/volumes:/command: redis-server --requirepass '"$NEW_REDIS_PASSWORD"'\n    volumes:/' docker-compose.prod.yml

# –û–±–Ω–æ–≤–ª—è–µ–º env.production.example
echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ backend/env.production.example..."
sed -i.backup "s/JWT_SECRET=your-super-secret-jwt-key-change-in-production-2024/JWT_SECRET=$NEW_JWT_SECRET/" backend/env.production.example
sed -i "s/DATABASE_PASSWORD=birdpass123/DATABASE_PASSWORD=$NEW_DB_PASSWORD/" backend/env.production.example

# –î–æ–±–∞–≤–ª—è–µ–º Redis –ø–∞—Ä–æ–ª—å –≤ env —Ñ–∞–π–ª
echo "REDIS_PASSWORD=$NEW_REDIS_PASSWORD" >> backend/env.production.example

echo ""
echo "üîí 3. –ó–ê–ö–†–´–¢–ò–ï –ü–û–†–¢–û–í –ë–ê–ó –î–ê–ù–ù–´–•..."
echo "=================================="

# –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
sed -i 's/^    - "5432:5432"/    # - "5432:5432"  # –ó–∞–∫—Ä—ã—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/' docker-compose.prod.yml
sed -i 's/^    - "6379:6379"/    # - "6379:6379"  # –ó–∞–∫—Ä—ã—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/' docker-compose.prod.yml

echo "‚úÖ –ü–æ—Ä—Ç—ã PostgreSQL –∏ Redis –∑–∞–∫—Ä—ã—Ç—ã"

echo ""
echo "üõ°Ô∏è 4. –î–û–ë–ê–í–õ–ï–ù–ò–ï SECURITY MIDDLEWARE..."
echo "======================================"

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è helmet
cat > /tmp/security-patch.js << 'EOF'
// –î–æ–±–∞–≤–∏—Ç—å –≤ backend/src/main.ts –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤:
import helmet from 'helmet';

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ app.enableCors():
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "api-maps.yandex.ru"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "*.yandex.net"],
      connectSrc: ["'self'"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
  crossOriginEmbedderPolicy: false,
  hsts: {
    maxAge: 31536000,
    includeSubDomains: true,
    preload: true
  },
}));

// –°–∫—Ä—ã—Ç—å Swagger –≤ production
if (process.env.NODE_ENV !== 'production') {
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);
}
EOF

echo "üìÑ –°–æ–∑–¥–∞–Ω –ø–∞—Ç—á –¥–ª—è security middleware: /tmp/security-patch.js"
echo "‚ö†Ô∏è  –í–†–£–ß–ù–£–Æ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ backend/src/main.ts"

echo ""
echo "üì¶ 5. –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–ö–ï–¢–û–í –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò..."
echo "====================================="

cd backend

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
if [ -f "package.json" ]; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ helmet –¥–ª—è security headers..."
    npm install helmet @types/helmet
    
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ rate limiting..."
    npm install @nestjs/throttler
    
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CSRF protection..."
    npm install csurf @types/csurf
    
    echo "‚úÖ –ü–∞–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    echo "‚ö†Ô∏è  package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ backend/"
fi

cd ..

echo ""
echo "üç™ 6. –°–û–ó–î–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò COOKIES..."
echo "=============================================="

# –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö cookies
cat > /tmp/secure-cookies-patch.ts << 'EOF'
// –ó–∞–º–µ–Ω–∏—Ç—å –≤ frontend/src/utils/api.ts –∏ frontend/src/hooks/useAuth.tsx:

// –ë—ã–ª–æ:
// Cookies.set('accessToken', accessToken, { expires: 7 });
// Cookies.set('refreshToken', refreshToken, { expires: 30 });

// –°—Ç–∞–ª–æ:
const cookieOptions = {
  expires: 7,
  secure: process.env.NODE_ENV === 'production', // HTTPS only –≤ production
  sameSite: 'strict' as const, // –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
  httpOnly: false, // –ù—É–∂–Ω–æ false –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
};

Cookies.set('accessToken', accessToken, cookieOptions);
Cookies.set('refreshToken', refreshToken, { ...cookieOptions, expires: 30 });
EOF

echo "üìÑ –°–æ–∑–¥–∞–Ω –ø–∞—Ç—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö cookies: /tmp/secure-cookies-patch.ts"
echo "‚ö†Ô∏è  –í–†–£–ß–ù–£–Æ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend/src/utils/api.ts –∏ frontend/src/hooks/useAuth.tsx"

echo ""
echo "üîç 7. –°–û–ó–î–ê–ù–ò–ï .ENV –§–ê–ô–õ–û–í..."
echo "============================"

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è production
cat > backend/.env << EOF
NODE_ENV=production
DATABASE_URL=postgresql://birduser:$NEW_DB_PASSWORD@postgres:5432/birdwatching
DATABASE_HOST=postgres
DATABASE_PORT=5432
DATABASE_NAME=birdwatching
DATABASE_USERNAME=birduser
DATABASE_PASSWORD=$NEW_DB_PASSWORD
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=$NEW_REDIS_PASSWORD
JWT_SECRET=$NEW_JWT_SECRET
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d
PORT=3010
FRONTEND_URL=http://5.144.181.38:8080
EOF

echo "‚úÖ –°–æ–∑–¥–∞–Ω backend/.env —Å –Ω–æ–≤—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"

echo ""
echo "üìã 8. –°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–õ–ò–°–¢–ê –†–£–ß–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô..."
echo "=========================================="

cat > SECURITY_MANUAL_FIXES.md << 'EOF'
# üîí –†–£–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

## ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
- [x] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
- [x] –ó–∞–∫—Ä—ã—Ç—ã –ø–æ—Ä—Ç—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö  
- [x] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- [x] –°–æ–∑–¥–∞–Ω—ã .env —Ñ–∞–π–ª—ã

## ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –†–£–ß–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:

### 1. –î–æ–±–∞–≤–∏—Ç—å helmet –≤ backend/src/main.ts
```typescript
// –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç:
import helmet from 'helmet';

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ app.enableCors():
app.use(helmet({
  // ... (—Å–º. /tmp/security-patch.js)
}));

// –°–∫—Ä—ã—Ç—å Swagger –≤ production:
if (process.env.NODE_ENV !== 'production') {
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);
}
```

### 2. –î–æ–±–∞–≤–∏—Ç—å rate limiting –≤ backend/src/app.module.ts
```typescript
import { ThrottlerModule } from '@nestjs/throttler';

@Module({
  imports: [
    ThrottlerModule.forRoot({
      ttl: 60,
      limit: 10,
    }),
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  ],
})
```

### 3. –û–±–Ω–æ–≤–∏—Ç—å cookies –≤ frontend/src/utils/api.ts
```typescript
// –°–º. /tmp/secure-cookies-patch.ts
```

### 4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å HTTPS (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx -d yourdomain.com
```

### 5. –û–±–Ω–æ–≤–∏—Ç—å CORS –¥–ª—è HTTPS
```typescript
// –í backend/src/main.ts:
const allowedOrigins = [
  'https://yourdomain.com', // ‚úÖ HTTPS
  'http://localhost:3011',  // –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
];
```

### 6. –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Redis –ø–∞—Ä–æ–ª—è –≤ backend/src/app.module.ts
```typescript
// –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis:
REDIS_PASSWORD: configService.get('REDIS_PASSWORD'),
```

## üöÄ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
```bash
# –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
./redeploy.sh

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
./check-security.sh
```
EOF

echo "üìÑ –°–æ–∑–¥–∞–Ω SECURITY_MANUAL_FIXES.md —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"

echo ""
echo "üîê 9. –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò..."
echo "============================================="

cat > check-security.sh << 'EOF'
#!/bin/bash

echo "üîç –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
echo "==================================="

echo ""
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
nmap -p 5432,6379 localhost 2>/dev/null | grep -E "(5432|6379)" || echo "‚úÖ –ü–æ—Ä—Ç—ã –ë–î –∑–∞–∫—Ä—ã—Ç—ã"

echo ""
echo "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS..."
curl -I https://5.144.181.38:8080 2>/dev/null | head -1 | grep -q "200" && echo "‚úÖ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå HTTPS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

echo ""
echo "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers..."
curl -I http://5.144.181.38:3010/auth/profile 2>/dev/null | grep -q "X-Frame-Options" && echo "‚úÖ Security headers –µ—Å—Ç—å" || echo "‚ùå Security headers –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

echo ""
echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤..."
grep -q "your-super-secret" docker-compose.prod.yml && echo "‚ùå –°–ª–∞–±—ã–µ —Å–µ–∫—Ä–µ—Ç—ã!" || echo "‚úÖ –°–µ–∫—Ä–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

echo ""
echo "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger –≤ production..."
curl -s http://5.144.181.38:3010/api/docs | grep -q "Swagger" && echo "‚ùå Swagger –¥–æ—Å—Ç—É–ø–µ–Ω –≤ production!" || echo "‚úÖ Swagger —Å–∫—Ä—ã—Ç"

echo ""
echo "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting..."
for i in {1..15}; do
  curl -s -o /dev/null -w "%{http_code}" http://5.144.181.38:3010/auth/login -d '{"email":"test","password":"test"}' -H "Content-Type: application/json"
  echo -n " "
done
echo ""
echo "–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ 429 (Too Many Requests) - rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
EOF

chmod +x check-security.sh
echo "‚úÖ –°–æ–∑–¥–∞–Ω check-security.sh"

echo ""
echo "üéØ –†–ï–ó–Æ–ú–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô"
echo "===================="
echo "‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã"
echo "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã –ø–æ—Ä—Ç—ã PostgreSQL (5432) –∏ Redis (6379)"  
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (helmet, throttler, csurf)"
echo "‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"
echo "‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞—Ç—á–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
echo "‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

echo ""
echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!"
echo "======================================="
echo "1. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ SECURITY_MANUAL_FIXES.md"
echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTPS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"  
echo "3. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ./redeploy.sh"
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: ./check-security.sh"

echo ""
echo "üîê –ù–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backend/.env"
echo "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ SECURITY_MANUAL_FIXES.md"
echo "üîç –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –≤ SECURITY_AUDIT.md"

echo ""
echo "üö® –ù–ï –ó–ê–ë–£–î–¨–¢–ï:"
echo "- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ"
echo "- –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
echo "- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

echo ""
echo "‚úÖ –ö–†–ò–¢–ò–ß–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!"
EOF

chmod +x fix-security-critical.sh



