version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: birdwatching
      POSTGRES_USER: birduser
      POSTGRES_PASSWORD: birdpass123
    ports:
      - "3012:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U birduser -d birdwatching"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - birdwatch-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "3013:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - birdwatch-network

  backend:
    build: ./backend
    restart: unless-stopped
    ports:
      - "3010:3010"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=birduser
      - DATABASE_PASSWORD=birdpass123
      - DATABASE_NAME=birdwatching
      - JWT_SECRET=your-super-secret-jwt-key-here
      - JWT_EXPIRES_IN=7d
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-here
      - JWT_REFRESH_EXPIRES_IN=30d
      - PORT=3010
      - NODE_ENV=production
      - FRONTEND_URL=http://localhost:3011
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - birdwatch-network

  frontend:
    build: ./frontend
    restart: unless-stopped
    ports:
      - "3011:3011"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3010
      - PORT=3011
    depends_on:
      - backend
    networks:
      - birdwatch-network

  telegram-bot:
    build: ./telegram-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_BASE_URL=http://backend:3010
      - BOT_USERNAME=birdwatch_bot
    depends_on:
      - backend
    networks:
      - birdwatch-network

volumes:
  postgres_data:
  redis_data:

networks:
  birdwatch-network:
    driver: bridge
